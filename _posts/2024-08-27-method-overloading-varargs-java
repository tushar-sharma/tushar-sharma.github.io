
Method Overloading and Varargs in Java

Method overloading in Java allows mulitple method to have same name but different parameters. Where as variable arguments (varargs) are a feature that allows a method to accept zero or more arguments of a specified type. 

Lets say you have a method that takes a string as argument and prints it to console

```java
public void printArgs(String args) {
  System.out.println(args);
}
```

We can use method overloading if we want to print multiple strings or multiple arguments

```java
public void printArgs(String arg1, String arg2) { 
  System.out.println(arg1 + " " + arg2);
}

public void printArgs(String[] args) {
  for (String arg : args) {
    System.out.println(arg);
  }
}
```

for invoking the methods, we need to pass arguments differnetly like 

```java
printArgs("test");

printArgs(new String[]{"test1", "test2", "test3"});
```

However we can use `varargs` which accepts both individual arguments as well as array arrays. 

```java
public void printArgs(String... args) {
  Arrays.stream(args)
      .forEach(System.out::println);
}
````

Now we have the same definition while invoking 

```java
printArgs("test1");

printArgs("test1" , "test2");

printArgs(new String[]{"test1", "test2", "test3"});
```