---
published: false
---
## Using threading in python


Threading is not always fast. But certain operatins can be faster when using threads like IO, reading from database, API calls, etc. For a example, connecting to two databases simultaneously

Lets say we have a DB class that connects to get the connections details

```python
class DB(object):

    def __init__(self, type, host, port, database, username, password, query, jar):
        self._type = type
        self._host = host
        self._port = port
        self._database = database
        self._username = username
        self._password = password
        self._query = query
        self._jar = jar
```

Then we can create a list of source & target connection details

```python
dbfactory = [DB(src_type,
                src_host,
                src_port,
                src_database,
                src_username,
                src_password,
                src_query,
                src_jar
                ), 
             DB(tgt_type,
                tgt_host,
                tgt_port,
                tgt_database,
                tgt_username,
                tgt_password,
                tgt_query,
                tgt_jar)] 
```

now we can use  concurrent.futures for asynchronously executing callables. Lets' say we have a get_data function to fetch data for each databases. So we can do something like this


```python
from concurrent.futures import ThreadPoolExecutor, as_completed

with ThreadPoolExecutor() as executor:

    futures = [executor.submit(get_data, item) for item in dbfactory]

collect_df = [ ]

for future in as_completed(futures):
        collect_df.append(future.result())

```

Our result will be stored in collect_df.


